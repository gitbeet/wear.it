import Head from "next/head";
import Nav from "./Nav";
import Footer from "./Footer";

import { useEffect, useState, useCallback } from "react";
import Link from "next/link";
import { FiChevronLeft, FiChevronRight } from "react-icons/fi";
import Carousel from "react-multi-carousel";
import {
  ButtonGroupProps,
  ArrowProps,
  DotProps,
} from "react-multi-carousel/lib/types";
import { BsArrowRight, BsChevronRight } from "react-icons/bs";

// const promoItems = [<div key={1}>item1</div>, <div key={2}>item2</div>];

export const TextPromos = () => {
  const slides = [
    {
      text: "Unlock savings with our exclusive deals!",
      linkText: "Shop Now",
      link: "/products/men",
    },
    {
      text: "Don't miss out! Limited-time offers just for you.",
      linkText: "Discover Deals",
      link: "/products/women",
    },
    {
      text: "Explore the latest arrivals and enjoy special discounts.",
      linkText: "Browse Collection",
      link: "/products/kids",
    },
  ];
  const [currentSlide, setCurrentSlide] = useState(0);
  const [touched, setTouched] = useState(false);
  const [direction, setDirection] = useState<"forwards" | "reverse">(
    "forwards",
  );
  const disabledLeft = currentSlide < 1;
  const disabledRight = currentSlide >= slides.length - 1;
  const nextSlide = useCallback(() => {
    setCurrentSlide((prev) => (prev >= slides.length - 1 ? 0 : prev + 1));
  }, [slides.length]);

  useEffect(() => {
    if (touched) return;
    const interval = setInterval(nextSlide, 4000);
    return () => clearInterval(interval);
  }, [touched, nextSlide]);

  const responsive = {
    desktop: {
      breakpoint: { max: 3000, min: 1280 },
      items: 1,
    },
    desktopSmall: {
      breakpoint: { max: 1280, min: 1024 },
      items: 1,
    },
    tablet: {
      breakpoint: { max: 1024, min: 464 },
      items: 1,
    },
    mobile: {
      breakpoint: { max: 464, min: 0 },
      items: 1,
    },
  };

  const CustomRightArrow = ({ onClick, ...rest }: ArrowProps) => {
    return (
      <FiChevronRight
        role="button"
        className="absolute left-full h-6 w-6 -translate-x-full bg-gray-100 text-gray-800"
        onClick={() => onClick?.()}
      />
    );
  };

  const CustomLeftArrow = ({ onClick, ...rest }: ArrowProps) => {
    return (
      <FiChevronRight
        role="button"
        className="absolute left-0  h-full w-6 rotate-180 bg-gray-100 text-gray-800"
        onClick={() => onClick?.()}
      />
    );
  };

  return (
    <div className="w-full  bg-gray-100">
      <Carousel
        className="relative mx-auto w-[min(100%,700px)] py-1"
        customRightArrow={<CustomRightArrow />}
        customLeftArrow={<CustomLeftArrow />}
        infinite
        autoPlay
        autoPlaySpeed={4000}
        responsive={responsive}
      >
        {slides.map((slide, i) => (
          <div className="text-center font-semibold" key={i}>
            <p>{slide.text}</p>
            <Link className="text-sm font-bold underline" href={slide.link}>
              {slide.linkText}
            </Link>
          </div>
        ))}
      </Carousel>
    </div>
  );
};

const Layout: React.FC<React.PropsWithChildren> = ({ children }) => {
  return (
    <>
      <Head>
        <title>e.fashion</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`min-h-[100dvh] bg-gray-50 font-body text-gray-800`}>
        <Nav />
        <TextPromos />
        <section className="mx-auto min-h-[100dvh] max-w-[1600px] ">
          {children}
        </section>
        <Footer />
      </main>
    </>
  );
};

export default Layout;
