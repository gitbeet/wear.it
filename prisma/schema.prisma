// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"    
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// ENUMS

enum CategoryType {
  MEN
  WOMEN
  KIDS
}

enum ProductSize {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum ProductColor {
  PURPLE
  BLACK
  RED
  ORANGE
  BLUE
  WHITE
  BROWN
  GREEN
  PINK
  YELLOW
  GRAY
  BEIGE
}



enum CollectionSeason {
  SPRING
  SUMMER
  FALL
  WINTER
}

// PRODUCT RELATED MODELS

model Product {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  SKU String
  price Float
  description String
  category ProductCategory @relation(fields: [categoryId] , references: [id])
  categoryId Int
  types CategoryType[]
  sizes SizeDetails[]
  colors ColorDetails[]
  discount Discount? @relation(fields: [discountId] , references: [id])
  discountId Int?
  collection Collection? @relation(fields: [collectionId] , references: [id])
  collectionId Int?
  inventory ProductInventory @relation(fields: [inventoryId] , references: [id])
  inventoryId String @unique
  favorite Favorite[]
  images ProductImage[] 
  cartItems CartItem[]
  orderItems OrderItem[]
  reviews UserReview[]
  historyItems HistoryItem[]
  @@index([name])
}    

model UserReview  {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product Product @relation(fields: [productId] , references: [id] , onDelete: Cascade)
  productId String
  userId String
  comment String
  rate Int
}

model Favorite {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product Product @relation(fields: [productId] , references: [id] , onDelete: Cascade)
  productId String
  color ProductColor
  userId String
}

model Collection {
  id Int @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  year Int
  season CollectionSeason
  products Product[]
}

model ColorDetails {
  id Int @id 
  name String @unique
  color ProductColor @unique
  products Product[]
}

model SizeDetails {
  id Int @id 
  name String @unique
  size ProductSize @unique
    products Product[]

}

model ProductImage {
  id        String      @id @default(cuid())
  imageURL  String
  // imageBlur String
  Product   Product @relation(fields: [productId], references: [id] , onDelete: Cascade)
  productId String
  color ProductColor
}

model ProductCategory {
  id Int @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  slug String @unique
  types CategoryType[]
  parentId Int?
  parent ProductCategory? @relation(fields: [parentId] , references: [id] , name: "ParentChild")
  children ProductCategory[] @relation(name: "ParentChild")
  products Product[]
  seo CategorySEO[]
}

model CategorySEO {   
  id Int @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type CategoryType
  metaTitle String?
  metaDescription String?
  metaKeywords String?
  metaOGImage String
  category ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId Int
}

 model TypeSEO {
  id Int @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type CategoryType @unique
  metaTitle String?
  metaDescription String?
  metaKeywords String?
  metaOGImage String?
 }

model Discount {
    id        Int      @id
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    description String
    discountPercent Float
    active Boolean
    products Product[]
}

// INVENTORY RELATED MODELS
model ProductInventory {
    id        String      @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    // Change to required later
    product Product ?
    quantity Int
    colors ProductColorInventory[]
}


model ProductColorInventory {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  inventory ProductInventory @relation(fields: [inventoryId] ,references: [id] ,onDelete: Cascade)
  inventoryId String
  sizes ProductSizeInventory[]
}


model ProductSizeInventory {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  colorInventory ProductColorInventory @relation(fields: [colorInventoryId] ,references: [id] ,onDelete: Cascade)
  colorInventoryId String
}



// USER RELATED MODELS

model UserAddress {
  id        String      @id @default(cuid())
  userId String
  addressLine1 String
  addressLine2 String
  city String
  postalCode String
  country String
  telephone String
  mobile String
}

model UserPayment {
  id        String      @id @default(cuid())
  userId String
  paymentType String
  provider String
  accountNumber String
  expiry String
}

// ORDER RELATED MODELS

model OrderDetails {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  total Decimal
  orderItems OrderItem[]
  paymentDetails PaymentDetails?  @relation(fields: [paymentId] , references: [id])
  paymentId String? @unique
}

model OrderItem {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity Int
  color ProductColor
  size ProductSize
  order OrderDetails @relation(fields: [orderId] , references: [id])
  orderId String
  product Product @relation(fields: [productId] , references: [id] , onDelete: Cascade)
  productId String
}

model PaymentDetails {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount Int
  provider String
  status String
  orderDetails OrderDetails?
}

// SHOPPING SESSION RELATED MODELS

model CartItem {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity Int
  size ProductSize
  color ProductColor
  shoppingSession ShoppingSession @relation(fields: [sessionId] , references: [id] , onDelete: Cascade)
  sessionId String
  product Product @relation(fields: [productId] , references: [id] , onDelete: Cascade)
  productId String
}

model ShoppingSession {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @unique
  total Decimal
  cartItems CartItem[]
}

// HISTORY RELATED

model ProductHistory {
  id String @id @default(cuid())
    createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String @unique
  items HistoryItem[]	
}

model HistoryItem {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
    productHistory ProductHistory @relation(fields: [historyId] ,references: [id] ,onDelete: Cascade)
    historyId String
    product Product @relation(fields: [productId] ,references: [id] ,onDelete: Cascade)
    productId String
}