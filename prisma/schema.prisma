// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {

  provider = "postgresql"

  url = env("DATABASE_URL") // uses connection pooling

  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection

}

// ENUMS

enum CategoryType {
  MEN
  WOMEN
}

enum ProductSize {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum ProductColor {
  PURPLE
  BLACK
  RED
  ORANGE
  BLUE
  WHITE
  BROWN
  GREEN
  PINK
}

// PRODUCT RELATED MODELS

model Product {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  SKU String
  price Float
  description String
  category ProductCategory @relation(fields: [categoryId] , references: [id])
  categoryId Int
  types CategoryType[]
  sizes ProductSize[]
  colors ProductColor[]
  discount Discount? @relation(fields: [discountId] , references: [id])
  discountId String?
  inventory ProductInventory @relation(fields: [inventoryId] , references: [id])
  inventoryId Int  @unique
  @@index([name])
}

model ProductCategory {
  id Int @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  slug String
  types CategoryType[]
  description String
  parentId Int?
  parent ProductCategory? @relation(fields: [parentId] , references: [id] , name: "ParentChild")
  children ProductCategory[] @relation(name: "ParentChild")
  products Product[]
}

model ProductInventory {
    id        Int      @id 
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    quantity Float
    product Product?
}

model Discount {
    id        String      @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name      String
    description String
    discountPercent Float
    active Boolean
    products Product[]
}


// USER RELATED MODELS

model UserAddress {
  id        String      @id @default(cuid())
  userId String
  addressLine1 String
  addressLine2 String
  city String
  postalCode String
  country String
  telephone String
  mobile String
}

model UserPayment {
  id        String      @id @default(cuid())
  userId String
  paymentType String
  provider String
  accountNumber String
  expiry String
}

// ORDER RELATED MODELS

model OrderDetails {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  total Decimal
  orderItems OrderItems[]
  paymentDetails PaymentDetails  @relation(fields: [paymentId] , references: [id])
  paymentId String @unique
}

model OrderItems {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity Int
  order OrderDetails @relation(fields: [orderId] , references: [id])
  orderId String
}

model PaymentDetails {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount Int
  provider String
  status String
  orderDetails OrderDetails?
}

// SHOPPING SESSION RELATED MODELS

model CartItem {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity Int
  shoppingSession ShoppingSession @relation(fields: [sessionId] , references: [id])
  sessionId String
}

model ShoppingSession {
  id        String      @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  total Decimal
  cartItems CartItem[]
}